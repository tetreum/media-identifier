<html>
	<title>Media identifier</title>
	<body>
		<h2>Media identifier</h2>
		<h3>Log</h3>
		<div id="output-log">

		</div>
		<h3>Failed matches</h3>
		<ul id="failed-matches">
		</ul>
		<style>
			body {
				background: black;
				color: white;
				font-family: Verdana;
			}
			#failed-matches li {
			    margin-bottom: 5px;
			}
			#failed-matches input {
				width: 50%;
				padding: 5px;
			}
			#output-log {
			    border: 1px solid grey;
				padding: 5px;
				height: 300px;
				overflow: auto;
				overflow-x: hidden;
				display: flex;
				flex-direction: column-reverse;
			}
			#output-log span {
			    display: block;
			}
			button {
			  position: relative;
			  vertical-align: top;
			  padding: 5px;
			  font-size: 22px;
			  color: white;
			  text-align: center;
			  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);
			  background: #bdc3c7;
			  border-bottom: 2px solid #acb2b7;
			  border: 0;
			  cursor: pointer;
			  -webkit-box-shadow: inset 0 -2px #acb2b7;
			  box-shadow: inset 0 -2px #acb2b7;
			}
			button:hover {
				background: #acb2b7;
				box-shadow: inset 0 -2px grey;
			}
			button.red {
				background: #e74c3c;
				box-shadow: inset 0 -2px #db4334;
				-webkit-box-shadow: inset 0 -2px #db4334;
				border-bottom: 2px solid #db4334;
			}
			button.red:hover {
				background: #db4334;
				box-shadow: inset 0 -2px #d44132;
				-webkit-box-shadow: inset 0 -2px #d44132;
				border-bottom: 2px solid #d44132;
			}
		</style>
		<script>
			const formatParams = ( params ) => {
			  return "?" + Object
			        .keys(params)
			        .map(function(key){
			          return key+"="+encodeURIComponent(params[key])
			        })
			        .join("&")
			}
			const query = (url, cb, method = "GET", params = {}) => {
				let baseUrl = location.href;
				let xmlhttp = new XMLHttpRequest();
				xmlhttp.onreadystatechange = function() {
					if (this.readyState == 4 && this.status == 200) {
						cb(this);
					}
				};

				// avoid duplicated "//"
				if (baseUrl[baseUrl.length - 1] === "/") {
					baseUrl = baseUrl.slice(0, -1);
				}
				xmlhttp.open(method, baseUrl + url + formatParams(params));

				if (method == "POST") {
					xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

					if (Object.keys(params).length > 0) {
						let data = new FormData();

						for (let k in params) {
							data.append(k, params[k]);
						}
						return xmlhttp.send(data);
					}
				}
				xmlhttp.send();
			}

			const deleteFile = (name) => {
				let confirms = confirm("Wanna delete " + name + "?")

				if (confirms) {
					query('/delete', (response) => {
						updateLog();
						updateFails();
					}, 'POST', {
						name,
					});
				}
			}

			const renameFile = (oldName) => {
				const newName = document.querySelector("[data-file=\"" + oldName + "\"] input").value;

				if (newName === oldName || newName.length < 1) {
					return;
				}

				query('/rename', (response) => {
					updateLog();
					updateFails();
				}, 'GET', {
					newName,
					oldName,
				});
			}
			const updateLog = () => {
				query('/log', (response) => {
					document.querySelector('#output-log').innerHTML = response.responseText;
				});
			}
			const updateFails = () => {
				query('/failed-matches', (response) => {
					document.querySelector('#failed-matches').innerHTML = response.responseText;
				});
			}
			setInterval(updateLog, 1000 * 5);
			updateLog();
			updateFails();
		</script>
	</body>
</html>
